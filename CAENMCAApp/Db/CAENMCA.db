record(waveform, "$(P)$(Q)DEVICE:NAME")
{
    field(DESC, "Device Name")
    field(NELM, "256")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,0)DEVICENAME")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(waveform, "$(P)$(Q)DEVICE:ADDR")
{
    field(DESC, "Device Addr")
    field(NELM, "256")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,0)DEVICEADDR")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(waveform, "$(P)$(Q)TITLE")
{
    field(DESC, "Run title")
    field(NELM, "256")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,0)RUNTITLE")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(waveform, "$(P)$(Q)TITLE:SP")
{
    field(DESC, "Set Run title")
    field(NELM, "256")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),0,0)RUNTITLE")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(waveform, "$(P)$(Q)COMMENT")
{
    field(DESC, "Run comment")
    field(NELM, "512")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,0)RUNCOMMENT")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(waveform, "$(P)$(Q)COMMENT:SP")
{
    field(DESC, "Set Run comment")
    field(NELM, "256")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),0,0)RUNCOMMENT")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(stringin, "$(P)$(Q)RUNNUMBER")
{
    field(DESC, "Run Number")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,0)RUNNUMBER")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)$(Q)IRUNNUMBER")
{
    field(DESC, "Run Number")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,0)IRUNNUMBER")
    field(SCAN, "I/O Intr")
    info(INTEREST, "MEDIUM")
	info(archive, "VAL")
	field(EGU, "")
}

# save last run number
record(longout, "$(P)$(Q)_IRUNNUMBER")
{
    field(DESC, "Run Number")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,0)IRUNNUMBER")
	field(EGU, "")
    field(PINI, "YES")
    info(autosaveFields_pass0, "VAL") # use positions/pass0 as saved more frequently
    info(asyn:READBACK, "1") # needed as we increment run number in driver code
}

record(stringin, "$(P)$(Q)FILEPREFIX")
{
    field(DESC, "File Prefix")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,0)FILEPREFIX")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(autosaveFields, "VAL")
}

record(stringout, "$(P)$(Q)FILEPREFIX:SP")
{
    field(DESC, "File Prefix")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(PORT),0,0)FILEPREFIX")
    field(PINI, "YES")
    info(INTEREST, "HIGH")
    info(autosaveFields, "VAL")
}

# start both channels on hexagon
record(bo, "$(P)$(Q)BEGINRUN:SP")
{
    field(DESC, "Begin this hexagon")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(UDFS, "NO_ALARM")
    field(FLNK, "$(P)$(Q)START:SP.PROC")
}

# raise an event to start all hexagons in this IOC
record(event, "$(P)$(Q)BEGINALL:SP")
{
    field(DESC, "Begin all hexagons")
    field(VAL, "BeginRun")
}

record(bo, "$(P)$(Q)BEGINALL")
{
    field(SCAN, "Event")
    field(EVNT, "BeginRun")
    field(DESC, "Begin a Run")
    field(FLNK, "$(P)$(Q)BEGINRUN:SP.PROC")
}

record(bo, "$(P)$(Q)ABORTRUN:SP")
{
    field(DESC, "Abort this hexagon")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(UDFS, "NO_ALARM")
    field(FLNK, "$(P)$(Q)STOP:SP.PROC")
}

record(event, "$(P)$(Q)ABORTALL:SP")
{
    field(DESC, "Abort all hexagons")
    field(VAL, "AbortRun")
}

record(bo, "$(P)$(Q)ABORTALL")
{
    field(SCAN, "Event")
    field(EVNT, "AbortRun")
    field(DESC, "Abort a Run")
    field(FLNK, "$(P)$(Q)ABORTRUN:SP.PROC")
}

record(bo, "$(P)$(Q)ENDRUN:SP")
{
    field(DESC, "End a Run")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(UDFS, "NO_ALARM")
    field(OUT, "$(P)$(Q)STOP:SP.PROC PP")
    field(FLNK, "$(P)$(Q)_ENDRUN.PROC")
}

record(bo, "$(P)$(Q)_ENDRUN")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,0)ENDRUN")
}

record(event, "$(P)$(Q)ENDALL:SP")
{
    field(DESC, "End a Run")
    field(VAL, "EndRun")
}

record(bo, "$(P)$(Q)ENDALL")
{
    field(SCAN, "Event")
    field(EVNT, "EndRun")
    field(DESC, "End a Run")
    field(FLNK, "$(P)$(Q)ENDRUN:SP.PROC")
}

# if an individual channel calls ACQSTART / ACQSTOP it
# will pass 0 or 1 from the bo record. Here we pass 3
# as the mask which means both channels and will always
# be differen to the single channel case. 

record(bo, "$(P)$(Q)START:SP")
{
	field(FLNK, "$(P)$(Q)_START:SP")
}

record(longout, "$(P)$(Q)_START:SP")
{
    field(VAL, "3")
    field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),0,0)ACQSTART")
}

record(bo, "$(P)$(Q)STOP:SP")
{
	field(FLNK, "$(P)$(Q)_STOP:SP")
}

record(longout, "$(P)$(Q)_STOP:SP")
{
    field(VAL, "3")
    field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),0,0)ACQSTOP")
}

record(bo, "$(P)$(Q)RESTART:SP")
{
    field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),0,0)RESTART")
}

record(stringout, "$(P)$(Q)CONFIG:SP")
{
    field(DTYP, "asynOctetWrite")
	field(OUT, "@asyn($(PORT),0,0)CONFIG")
}

record(stringin, "$(P)$(Q)CONFIG")
{
    field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(PORT),0,0)CONFIG")
	field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(Q)CONFIGS")
{
    field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(PORT),0,0)CONFIG_AVAIL")
	field(FTVL, "CHAR")
	field(NELM, "512")
	field(SCAN, "I/O Intr")
}

# are both channels running
record(bi, "$(P)$(Q)ACQ:RUNNING")
{
    field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),0,0)ACQRUNNING")
	field(ZNAM, "No")
	field(ONAM, "Yes")
	field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(Q)TIMEREGS")
{
    field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),0,0)TIMINGREGISTERS")
	field(ZNAM, "Error")
	field(ONAM, "OK")
	field(SCAN, "I/O Intr")
}
